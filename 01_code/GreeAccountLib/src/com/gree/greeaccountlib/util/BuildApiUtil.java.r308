package com.gree.greeaccountlib.util;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.json.JSONException;
import org.json.JSONObject;

import com.gree.greeaccountlib.bean.ReqDataBean;
import com.gree.greeaccountlib.common.APIConstant;
import com.gree.greeaccountlib.common.RequestType;

public class BuildApiUtil {
	private static String TAG = "BuildApiUtil";

	// 生成头数据
	// public static HashMap<String, String> buildHeaderMap(ReqHeadBean bean) {
	// HashMap<String, String> map = new HashMap<String, String>();
	// map.put(APIConstant.KEY_APPID, bean.getAppId());
	// map.put(APIConstant.KEY_APPKEY, bean.getAppKey());
	// map.put(APIConstant.KEY_DEVICEID, bean.getDeviceId());
	// map.put(APIConstant.KEY_DEVICETYPE, bean.getDeviceType());
	// map.put(APIConstant.KEY_CONTENT_TYPE, bean.getContent_Type());
	// return map;
	// }

	// 生成data
	public static HashMap<String, String> buildDataMap(ReqDataBean bean,int requestType) {
		HashMap<String, String> map = new HashMap<String, String>();
		switch (requestType) {
		case RequestType.POST_VERIFY_MOBILE_PHONE:// 验证短信验证码
			map.put(APIConstant.KEY_REQUESTID, bean.getRequestId());
			map.put(APIConstant.KEY_SMSCODE, bean.getSmsCode());
			break;
		case RequestType.POST_REGISTER_PHONE:// 手机注册
			map.put(APIConstant.KEY_NAME, bean.getName());
			map.put(APIConstant.KEY_PASSWORD, bean.getPassword());
			map.put(APIConstant.KEY_PHONE, bean.getPhone());
			map.put(APIConstant.KEY_SERIALNUMBER, bean.getSerialNumber());
			map.put(APIConstant.KEY_MODEL, bean.getModel());
			map.put(APIConstant.KEY_WIFIMAC, bean.getWifiMac());
			map.put(APIConstant.KEY_IMEI, bean.getIMEI());
			map.put(APIConstant.KEY_ICCID, bean.getICCID());
			break;
		case RequestType.POST_REGISTER_EMAIL:// 邮箱注册
			map.put(APIConstant.KEY_NAME, bean.getName());
			map.put(APIConstant.KEY_PASSWORD, bean.getPassword());
			map.put(APIConstant.KEY_EMAIL, bean.getEmail());
			map.put(APIConstant.KEY_SERIALNUMBER, bean.getSerialNumber());
			map.put(APIConstant.KEY_MODEL, bean.getModel());
			map.put(APIConstant.KEY_WIFIMAC, bean.getWifiMac());
			map.put(APIConstant.KEY_IMEI, bean.getIMEI());
			map.put(APIConstant.KEY_ICCID, bean.getICCID());
			break;
		case RequestType.POST_EMAIL_VERIFY:// 邮箱认证
		case RequestType.POST_REQUEST_PASSWORD_RESET:// 邮箱找回密码
		case RequestType.POST_UPDATE_USERINFO:// 更新用户信息
			
			String email = bean.getEmail();
			if (null !=email && !email.equals("")) {
				map.put(APIConstant.KEY_EMAIL, bean.getEmail());
			}
			String name = bean.getName();
			if (null !=name && !name.equals("")) {
				map.put(APIConstant.KEY_NAME, bean.getName());
			}
			
			break;

		case RequestType.POST_LOGIN:// 登录
			map.put(APIConstant.KEY_NAME, bean.getName());
			map.put(APIConstant.KEY_PASSWORD, bean.getPassword());
			map.put(APIConstant.KEY_SERIALNUMBER, bean.getSerialNumber());
			map.put(APIConstant.KEY_MODEL, bean.getModel());
			map.put(APIConstant.KEY_WIFIMAC, bean.getWifiMac());
			map.put(APIConstant.KEY_IMEI, bean.getIMEI());
			map.put(APIConstant.KEY_ICCID, bean.getICCID());
			break;

		case RequestType.POST_RESET_PASSWORD:// 验证收到的验证码并重置密码
			map.put(APIConstant.KEY_PASSWORD, bean.getPassword());
			map.put(APIConstant.KEY_ID, bean.getId());
			map.put(APIConstant.KEY_PHONE, bean.getPhone());
			break;

		case RequestType.POST_UPDATE_PASSWORD:// 安全修改密码
			map.put(APIConstant.KEY_OLDPASSWORD, bean.getOldPassword());
			map.put(APIConstant.KEY_NEWPASSWORD, bean.getNewPassword());
			break;

		default:
			break;
		}

		return map;
	}


	public static String buildJson(HashMap<String, String> map) {
		JSONObject object = new JSONObject();
		Iterator iter = map.entrySet().iterator();
		while (iter.hasNext()) {
			Map.Entry entry = (Map.Entry) iter.next();
			String key = (String) entry.getKey();
			String val = (String) entry.getValue();
			try {
				object.put(key, val);
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		String jsonString = object.toString();
		LogUtils.i(TAG, "buildJson,Data: " + jsonString);
		return jsonString;
	}

}
